import math, pint

def calcFieldTestsV02Max(options):
    gender = options.gender.toLowerCase() || this.gender,
    age = int(options.age) || this.age,
    weight = int(options.weight) || this.weight,
    time = int(options.time),
    bmi = int(options.bmi) || (this.weight/Math.pow(this.height, 2)),
    hr = int(options.hr) || this.hr,
    speed = int(options.speed),
    results = {}
                                
    if gender == "female":
        gender = 0
    } else if gender == "male":
        gender = 1
    }
                                
    
    #  20m Shuttle Run Test
    #  Leger et al. (1988)
    #  Children 8-19 years old)
    if age and speed:
        results.shuttle = 31.025 + (3.238*speed) - (3.248*age) + 0.1536*(age*speed)
    }
    
    
    # 1.0 mile run/walk (8-17 years old)
    # Cureton et al. (1995)
    # for gender field, 1 for male, 0 for female
    if bmi and time and gender:
        results.mileRunWalk =108.94 - (8.41 * time) + 0.34 * Math.pow(time,2) + 0.21*(age*gender) - (0.84*bmi)
    }
    if distance:
        
         # 12 minute Run Test
         # Cooper (1968)
         # distance expected in meters
         
        results.TwelveMinuteTest = 0.0268*distance - 11.3
        
        # 15 minute run test
        # Balke (1963)
        # distance expected in meters 
        results.FifteenMinuteTest = 0.0178*distance + 9.6
    }
                                
    
    #  1 Mile Walk Test
    #  Kline et al. (1987)
    #  for gender field, 1 for male, 0 for female
    #  
    if age and weight and gender and time and hr:
        results.mileWalk = 132.853 - .0769*weight - 0.3877*age + 6.315*gender - 3.2649*time - 0.1565*hr
                                
    
    # 1.0 mile steady-state jog
    # George et al. (1993)
    if time and hr and weight:
        results.mileSteady = 100.5 - 0.1636 * weight - 1.438 * time - 0.1928 * hr
        results.MileHalf = [88.02 - (0.1656*weight) - (2.76*time) + (3.716*gender),
        100.16 + (7.30*gender) - (0.164*weight) - (1.273 * time) - (0.1563 * hr)]
    if hr and weight:
        
        # Astrand Step Test
        # Marley and Linnerud (1976)
        # Queen's College Step Test
        # McArdle et al. (1972)
        # For gender field, 1 for male, 0 for female
        # Male
        if gender =="male":
            results.astrand = 3.744*((weight+5)/(hr-62))
            results.queenscollege = 111.33 - (0.42 * hr) 
        # Female
        else if gender == "female": 
            results.astrand = 3.750*((weight-3)/(hr-65)) 
            results.queenscollege = 65.81 - (0.1847 * hr)   
                                                    
    return results
                            
# VO2 Max
def calcPopV02Max(time, time2, time3):
    time = int(time)
    time2 = int(time2)
    time3 = int(time3)
    results = {
        "male": {
            
            # Active & Sedentary Men
            # Pollock et al. (1976)
            # SEE = 2.50 (mL/kg/min)
            "balke": 1.444 * time + 14.99,
                
            # Naughton Protocol
            # Male cardiac patients
            # Foster et a. (1983)
            # SEE = 2.60 (mL/kg/min)
            "naughton": (1.61*time) +3.60, 
        },
        "female": {
               
            # Balke Protocol
            # Active & Sedentary Women
            # Pollock et al. (1982)
            # SEE = 2.20 (mL/kg/min)
            "balke": 1.38 * time + 5.22,
                
            # Bruce Protocol
            # Active & Sedentary Women
            # Pollock et al. (1982)
            # SEE = 2.70 (mL/kg/min)
            "bruce": 4.38 * time - 3.90,
        },
           
        # Bruce Protocol
        # Cardiac patients and Elderly Persons
        # McConnell and Clark (1987)
        # SEE = 4.9 (mL/kg/min)
        "elderly_cardiac": (2.282*time) + 8.545,
    }
    if time2 and time3:
          
          # Bruce Protocol
          # Active & Sedentary Men
          # Foster et al. (1984)
          # SEE = 3.35 (mL/kg/min)
          results["male"]["bruce"] = 14.76 - 1.379*time + 0.451*time2 - 0.012*time3
    return results
                        

# Walking VO2
# speed of treadmill in meters / minute
# grade (% incline) of treadmill in decimal form (e.g. 10% = 0.10) 
calcWalkingVO2: function(speed, grade:
    speed = int(speed)
    grade = int(grade)
    return speed * 0.1 + S * grade * 1.8

# Running VO2
# speed of treadmill in meters / minute
# grade (% incline) of treadmill in decimal form (e.g. 10% = 0.10) 
calcRunningVO2: function(speed, grade:
    speed = int(speed)
    grade = int(grade)
return speed * 0.2 + speed * grade * 0.9
                        
# Leg Ergometry VO2
# work rate in kgm / min 1 Watt = 6 kgm / min
# body mass in kilograms 1 kg = 2.2 lb
calclegErgometryVO2: function(work, mass:
    work = int(work)
    mass = int(mass)
    return work/mass * 1.8 + 3.5
                        
# Arm Ergometry VO2
# work rate in kgm / min 1 Watt = 6 kgm / min
# body mass in kilograms 1 kg = 2.2 lb
def calcArmErgometryVO2(work, mass):
    work = int(work)
    mass = int(mass)
    return work/mass * 3.0
                        
# Stepping VO2
# frequency of stepping in steps per minute
# bench height in meters 1 inch = 0.0254 meters
def calcSteppingVO2(frequency, height):
    frequency = int(frequench)
    height = int(height)
    return frequency * 0.2 + frequency * height * 1.8 * 1.33
                        
# Submaximal Tests
                        

# VO2 Reserve
# max is Max VO2
# rest is Resting VO2
# reserve and rest must be of same unit type (METs or mL/kg/min)
# 1 MET = 3.5 mL/kg/min
def VO2Reserve(max, rest):
    max = int(max)
    rest = int(rest)
    data = max - rest
    return data
                        

# Target VO2 
# intensity as relative exercise percentage (e.g. 10% = 0.10)
# reserve is Reserve VO2
# rest is Resting VO2
# reserve and rest must be of same unit type (METs or mL/kg/min)
# 1 MET = 3.5 mL/kg/min
def calcTargetVO2(intensity, reserve, rest):
    intensity = int(intensity)
    reserve = int(reserve)
    rest = int(rest)
    data = (intensity * reserve) + rest
    this.set({targetVO2: data})
    return data
                        
# HR Max
def calcHeartRateMax(age):
    age = int(age)
    data = 208 - (0.7 * age)
    return data
                        

# Target Heart Rate
# intensity as relative exercise percentage (e.g. 10% = 0.10)
# ACSM (2010) recommendati using 40% to 85% Hear Rate Reserve (HRR) for intensity
# rest is resting heart rate
# max is maximum heart rate
# max and rest must be of same unit type
def calcTargetHeartRate(intensity, rest, max):
    intensity = int(intensity), rest = int(rest) , max = int(max), data
    data = (intensity * (max - rest)) + rest
    return data
                        
# Device Specific Formulas
                        

# Accurate StairMaster 4000 PT METs
# setting is the Stairmaster MET setting
def calcStairMasterMets(setting):
    setting = int(setting)
    return 0.556 + 7.45 * setting
                        

# Tidal Volume (TV = IC - IRV) 
# Inspiratory Reserve Volume (IRV = ERV + TV - VC)
# Expiratory Reserve Volume (ERV = FRC - RV) 
# Residual Volume (RV)
# age in years
# bsa in meters squared ( body surface area for females) or kilograms (body mass for males)
def calcRV(age, height, options):
    gender = gender.toLowerCase() || this.gender,
    age = int(age) || this.age,
    height = int(height) || this.height,
    weight = int(options.weight) || this.weight,
    bsa = int(options.bsa),
    data
    if gender == "male" and weight:
        data = {
        Berglund: (0.0115*age) + (0.019* height) - 2.24,
        Boren: (0.022*age) + (0.0198*height) - (0.015*weight) - 1.54,
        Goldman: (0.017*age) + (0.027*height) - 3.477,
        }
    else if gender == "female" and bsa:
        data = {
        Berglund: (0.0115*age) + (0.019* height) - 2.24,
        Black: (0.021*age) + (0.023*height) - 2.978,
        Goldman: (0.017*age) + (0.027*height) - 3.477,
        Obrien: (0.03*age) + (0.0387*height) - (0.73*bsa) - 4.78
        }
    return data  

# Vital Capacity (VC = ERB + TV + IRV)
# Inspiratory Capacity (IC = TV + IRV)
# Functional Residual Capacity (FRC = RV + ERV)
# Total Lung Capacity (TLC = RV + VC)
def calcTLC: function(rv,vc):
    rv = int(rv) || 1300, vc = int(vc) || 4700                       
    return rv + vc